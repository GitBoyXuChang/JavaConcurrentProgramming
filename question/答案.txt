
线程安全：
多线程编程中，有可能会出现多个线程同时访问同一个共享、可变资源的情况；这种资源可能是：对象、变量、文件等。由于线程执行的过程是不可控的，容易产生线程安全问题。

当多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获取正确的结果，那这个对象是线程安全的。

共享：资源可以由多个线程同时访问
可变：资源可以在其生命周期内被修改

如何解决线程安全问题：  加锁  lock  sychronized
所有的并发模式在解决线程安全问题时，采用的方案都是序列化访问临界资源。


线程的创建方式：
1. new java.lang.Thread().start() 
2. 使用JNI将一个native thread attach（本机线程连接）到JVM中 
   针对 new java.lang.Thread().start()这种方式，只有调用start()方法的时候，才会真正的在JVM中去创建 

线程是有系统创建的还是JVM创建的



并行与并发
线程与内存模型和JVM
Synchronized和Lock场景
内存模型
为什么需要内存模型
Synchronized锁的升级
